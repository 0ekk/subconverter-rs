# Cursor Rules for subconverter-rs

# Code Quality & Maintainability
file_size_limits:
  pattern: ".*(\\.(rs|js|ts|tsx))$"
  replacement: "// Max file size: 
  // - Rust: 1000 lines 
  // - TS/JS: 500 lines
  // Split files that exceed these limits into modules"
  note: "Maintain manageable file sizes to improve readability and maintainability"

function_size_limits:
  pattern: "fn .*\\{[\\s\\S]{200,}\\}"
  replacement: "// Functions should be under 50 lines
  // Consider breaking large functions into smaller ones"
  note: "Keep functions focused and concise for better maintainability"

# API Client Usage
api_client_usage:
  pattern: "fetch\\(\\'?\\/api\\/"
  replacement: "// Use API client functions from @/lib/api-client instead of direct fetch calls
  // Example: 
  // import { updateRules } from '@/lib/api-client';
  // const result = await updateRules();"
  note: "Centralize API calls in api-client.ts instead of making direct fetch calls"

# Internationalization (i18n) with next-intl
i18n_client_import:
  pattern: "\"use client\"[\\s\\S]*?import"
  replacement: "\"use client\";

import { useTranslations } from 'next-intl';
import"
  note: "Always import useTranslations from next-intl in client components that need translation"

i18n_server_import:
  pattern: "import type.*\n.*from \"next"
  replacement: "import type { Metadata } from \"next\";
import { getTranslations, getLocale } from 'next-intl/server';
import { NextIntlClientProvider } from 'next-intl';
import"
  note: "Import server i18n functions in server components and layouts that need translation"

i18n_page_pattern:
  pattern: "export default function (\\w+)\\(\\) {\\s*(?!const t = useTranslations)"
  replacement: "export default function $1() {
  const t = useTranslations('$1');"
  note: "Initialize translations at the top of each page component with appropriate namespace"

i18n_layout_setup:
  pattern: "export default (async )?function (\\w+)Layout\\({\\s*children,\\s*}.*\\) {\\s*return \\(\\s*<html"
  replacement: "export default async function $2Layout({
  children,
}) {
  const locale = await getLocale();
  const messages = await getMessages();

  return (
    <html lang={locale}"
  note: "Setup locale and messages in layout components"

i18n_client_wrapper:
  pattern: "<body[^>]*>\\s*{children}"
  replacement: "<body$1>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
        </NextIntlClientProvider>"
  note: "Wrap children with NextIntlClientProvider in layout components"

i18n_static_text:
  pattern: "<h1[^>]*>[^{].*?<\\/h1>"
  replacement: "<h1$1>{t('title')}</h1>"
  note: "Replace static text with i18n translation keys in headings"

i18n_button_text:
  pattern: "<button[^>]*>\\s*([^{].*?)\\s*<\\/button>"
  replacement: "<button$1>{t('$2')}</button>"
  note: "Replace static text with i18n translation keys in buttons"

i18n_language_switcher:
  pattern: "<div className=\"flex (flex-col sm:flex-row|items-center)[^>]*>"
  replacement: "<div className=\"flex $1 justify-between mb-6\">
          <h1 className=\"text-4xl font-bold mb-4 sm:mb-0 text-center\">{t('title')}</h1>
          <div className=\"flex gap-4 items-center\">
            <LanguageSwitcher />
            "
  note: "Include LanguageSwitcher component in page headers"

# C++ to Rust conversion patterns
cpp_method_to_rust_trait:
  pattern: "tribool.*is_undef()"
  replacement: "Option<bool>.is_undef()"
  note: "Convert C++ tribool methods to Rust trait implementations"

ini_reader_adaptation:
  pattern: "erase_section"
  replacement: |
    pub fn erase_section(&mut self) {
        if self.current_section.is_empty() {
            return;
        }
        
        self.ini.remove_section(&self.current_section);
        
        if let Some(section_map) = self.content.get_mut(&self.current_section) {
            section_map.clear();
        }
        
        self.ini.set(&self.current_section, "", None);
    }
  note: "Adapt INIReader methods to work with configparser crate"

noname_placeholder:
  pattern: "ini.set(\"{NONAME}\""
  replacement: "ini.set(\"{NONAME}\", item_name, item_val)"
  note: "Handle {NONAME} placeholder in INI operations"

# Proxy conversion rules
proxy_handler_pattern:
  pattern: "handle_(.*)\(node, remark, .*\)"
  replacement: "fn handle_$1(node: &Proxy, remark: &str, ...) -> JsonValue"
  note: "Implement proxy type handlers similarly across all formats"

yaml_mapping_pattern:
  pattern: "YamlValue::Mapping\(.*\)"
  replacement: "let mut map = Mapping::new(); map.insert(...); YamlValue::Mapping(map)"
  note: "Create YAML mappings for proxy configurations"

# Type conversion
tribool_handling:
  pattern: "tribool (.*) = ext\\.(.*)"
  replacement: "let mut $1 = ext.$2; $1 = node.$2.define($1);"
  note: "Handle tribool value definitions and overrides"

option_to_json:
  pattern: "scv.apply_to_json\\(obj, \"skip-cert-verify\"\\)"
  replacement: "scv.apply_to_json(obj, \"skip-cert-verify\")"
  note: "Apply Option<bool> values to JSON objects conditionally"

# Common Rust patterns
error_handling:
  pattern: "ini\\.set.*\\.unwrap_or\\(\\(\\)\\)"
  replacement: "ini.set(...).unwrap_or(())"
  note: "Handle potential errors in INI operations with unwrap_or(())"

string_manipulations:
  pattern: "join\\(&.*\\)"
  replacement: "join(&filtered_nodelist, \",\")"
  note: "Join string arrays with separators"

yaml_node_operations:
  pattern: "yaml_node\\.to_string\\(\\)"
  replacement: "match yaml_node.to_string() { Ok(result) => result, Err(_) => String::new() }"
  note: "Handle YAML node serialization with proper error handling"

# File structure
module_organization:
  pattern: "mod (.*)"
  replacement: "pub mod $1"
  note: "Organize code into modules with proper visibility"

# JavaScript/TypeScript project configuration
js_ts_project_setup:
  pattern: "(package\\.json|next\\.config\\.js|webpack\\.config\\.js)"
  replacement: |
    // Use pnpm for package management
    // - Add "packageManager": "pnpm@10.x" to package.json
    // - Create .npmrc with "engine-strict=true" 
    // - Use rspack instead of webpack where possible
    
    // For Next.js projects:
    // next.config.js
    const { withExperimental } = require('@rspack/next-plugin');
    module.exports = withExperimental({
      // Additional config here
    });
    
    // For standard JS/TS projects:
    // rspack.config.js
    const rspack = require('@rspack/core');
    module.exports = {
      entry: './src/index.ts',
      // Other rspack configuration
    };
  note: "All JS/TS subprojects should use pnpm as package manager and rspack for bundling"

build_script_pattern:
  pattern: "\"scripts\": \\{([^}]*)\\}"
  replacement: "\"scripts\": {\n    \"dev\": \"rspack serve\",\n    \"build\": \"rspack build\",\n$1\n  }"
  note: "Use rspack in build scripts instead of webpack"
