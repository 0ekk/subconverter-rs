# Cursor Rules for subconverter-rs

# C++ to Rust conversion patterns
cpp_method_to_rust_trait:
  pattern: "tribool.*is_undef()"
  replacement: "Option<bool>.is_undef()"
  note: "Convert C++ tribool methods to Rust trait implementations"

ini_reader_adaptation:
  pattern: "erase_section"
  replacement: |
    pub fn erase_section(&mut self) {
        if self.current_section.is_empty() {
            return;
        }
        
        self.ini.remove_section(&self.current_section);
        
        if let Some(section_map) = self.content.get_mut(&self.current_section) {
            section_map.clear();
        }
        
        self.ini.set(&self.current_section, "", None);
    }
  note: "Adapt INIReader methods to work with configparser crate"

noname_placeholder:
  pattern: "ini.set(\"{NONAME}\""
  replacement: "ini.set(\"{NONAME}\", item_name, item_val)"
  note: "Handle {NONAME} placeholder in INI operations"

# Proxy conversion rules
proxy_handler_pattern:
  pattern: "handle_(.*)\(node, remark, .*\)"
  replacement: "fn handle_$1(node: &Proxy, remark: &str, ...) -> JsonValue"
  note: "Implement proxy type handlers similarly across all formats"

yaml_mapping_pattern:
  pattern: "YamlValue::Mapping\(.*\)"
  replacement: "let mut map = Mapping::new(); map.insert(...); YamlValue::Mapping(map)"
  note: "Create YAML mappings for proxy configurations"

# Type conversion
tribool_handling:
  pattern: "tribool (.*) = ext\\.(.*)"
  replacement: "let mut $1 = ext.$2; $1 = node.$2.define($1);"
  note: "Handle tribool value definitions and overrides"

option_to_json:
  pattern: "scv.apply_to_json\\(obj, \"skip-cert-verify\"\\)"
  replacement: "scv.apply_to_json(obj, \"skip-cert-verify\")"
  note: "Apply Option<bool> values to JSON objects conditionally"

# Common Rust patterns
error_handling:
  pattern: "ini\\.set.*\\.unwrap_or\\(\\(\\)\\)"
  replacement: "ini.set(...).unwrap_or(())"
  note: "Handle potential errors in INI operations with unwrap_or(())"

string_manipulations:
  pattern: "join\\(&.*\\)"
  replacement: "join(&filtered_nodelist, \",\")"
  note: "Join string arrays with separators"

yaml_node_operations:
  pattern: "yaml_node\\.to_string\\(\\)"
  replacement: "match yaml_node.to_string() { Ok(result) => result, Err(_) => String::new() }"
  note: "Handle YAML node serialization with proper error handling"

# File structure
module_organization:
  pattern: "mod (.*)"
  replacement: "pub mod $1"
  note: "Organize code into modules with proper visibility"

# Subscription handling
subscription_parsing:
  pattern: "explode_sub\\(.*\\)"
  replacement: |
    pub fn explode_sub(sub: &str, nodes: &mut Vec<Proxy>) -> bool {
        let sub = sub.trim();
        if sub.is_empty() {
            return false;
        }
        
        let mut processed = false;
        
        // Try SSD format
        if sub.starts_with("ssd://") {
            if super::ss::explode_ssd(sub, nodes) {
                processed = true;
            }
        }
        
        // Try Clash format
        if !processed && (sub.contains("\"Proxy\":") || sub.contains("\"proxies\":")) {
            if super::clash::explode_clash(sub, nodes) {
                processed = true;
            }
        }
        
        // Try Surge format
        if !processed && super::surge::explode_surge(sub, nodes) {
            processed = true;
        }
        
        // Try normal subscription format
        if !processed {
            // Base64 decode and parse
            let decoded = match STANDARD.decode(sub) {
                Ok(bytes) => match String::from_utf8(bytes) {
                    Ok(s) => s,
                    Err(_) => sub.to_string(),
                },
                Err(_) => sub.to_string(),
            };
            
            // Parse lines
            let delimiter = if decoded.contains('\n') { '\n' } 
                          else if decoded.contains('\r') { '\r' } 
                          else { ' ' };
                          
            for line in decoded.split(delimiter) {
                let line = line.trim().trim_end_matches('\r');
                if line.is_empty() { continue; }
                
                let mut node = Proxy::default();
                if explode(line, &mut node) {
                    nodes.push(node);
                }
            }
        }
        
        !nodes.is_empty()
    }
  note: "Implement subscription parsing with format detection and base64 support"

# JavaScript runtime integration
js_runtime_feature:
  pattern: "script_safe_runner"
  replacement: |
    #[cfg(feature = "js_runtime")]
    {
        if let Some(runtime) = &config.extra.js_runtime {
            if let Some(context) = &config.extra.js_context {
                script_safe_runner(runtime, context, |ctx| {
                    // JavaScript execution logic here
                }, global.script_clean_context);
            }
        }
    }
    #[cfg(not(feature = "js_runtime"))]
    {
        warn!("JavaScript runtime feature not enabled");
    }
  note: "Handle JavaScript runtime feature-gated code"

# Rule base handling
rule_base_loading:
  pattern: "load_content\\(&self\\)"
  replacement: |
    pub fn load_content(&self) -> HashMap<SubconverterTarget, String> {
        let mut base_content = HashMap::new();
        let global = Settings::current();
        let proxy_config = parse_proxy(&global.proxy_config);
        
        let load_content = |path: &str| -> Option<String> {
            if path.is_empty() { return None; }
            
            if path.starts_with("http://") || path.starts_with("https://") {
                match web_get(path, &proxy_config, None) {
                    Ok((content, _)) => {
                        debug!("Loaded rule base from URL: {}", path);
                        Some(content)
                    }
                    Err(e) => {
                        warn!("Failed to load rule base from URL {}: {}", path, e);
                        None
                    }
                }
            } else {
                match file_get(path, None) {
                    Ok(content) => {
                        debug!("Loaded rule base from file: {}", path);
                        Some(content)
                    }
                    Err(e) => {
                        warn!("Failed to load rule base from file {}: {}", path, e);
                        None
                    }
                }
            }
        };
        
        // Load rule bases for each target format
        if let Some(content) = load_content(&self.clash_rule_base) {
            base_content.insert(SubconverterTarget::Clash, content.clone());
            base_content.insert(SubconverterTarget::ClashR, content);
        }
        
        // ... load other rule bases ...
        
        base_content
    }
  note: "Implement rule base loading with file and URL support"

# Proxy group handling
proxy_group_config:
  pattern: "proxy_groups:"
  replacement: |
    pub struct ProxyGroupConfig {
        pub name: String,
        pub proxies: Vec<String>,
        pub type_: ProxyGroupType,
        pub url: Option<String>,
        pub interval: Option<u32>,
        pub tolerance: Option<u32>,
        pub lazy: Option<bool>,
        pub disable_udp: Option<bool>,
        pub use: Option<Vec<String>>,
    }
  note: "Define proxy group configuration structure"

# Subscription result handling
subscription_result:
  pattern: "SubconverterResult"
  replacement: |
    pub struct SubconverterResult {
        pub content: String,
        pub headers: HashMap<String, String>,
    }
  note: "Define subscription conversion result structure"

# Target format handling
target_format:
  pattern: "SubconverterTarget::"
  replacement: |
    match target {
        SubconverterTarget::Clash => {
            info!("Generate target: Clash");
            let base = config.base_content.get(&config.target).cloned().unwrap_or_default();
            proxy_to_clash(&mut nodes, &base, &mut ruleset_content, &config.proxy_groups, &mut config.extra.clone())
        }
        SubconverterTarget::Surge => {
            info!("Generate target: Surge");
            let base = config.base_content.get(&config.target).cloned().unwrap_or_default();
            proxy_to_surge(&mut nodes, &base, &mut ruleset_content, &config.proxy_groups, 0, &mut config.extra.clone())
        }
        // ... handle other targets ...
    }
  note: "Handle different target format conversions"

# Node preprocessing
node_preprocessing:
  pattern: "preprocess_nodes"
  replacement: |
    pub fn preprocess_nodes(nodes: &mut Vec<Proxy>, extra: &ExtraSettings, rename_array: &[String], emoji_array: &[String]) {
        for node in nodes.iter_mut() {
            // Apply rename rules
            for rule in rename_array {
                if let Some((pattern, replacement)) = rule.split_once('|') {
                    node.remark = regex::Regex::new(pattern)
                        .map(|re| re.replace(&node.remark, replacement).into_owned())
                        .unwrap_or_else(|_| node.remark.clone());
                }
            }
            
            // Apply emoji rules
            for rule in emoji_array {
                if let Some((pattern, emoji)) = rule.split_once('|') {
                    if regex::Regex::new(pattern).map(|re| re.is_match(&node.remark)).unwrap_or(false) {
                        node.remark = format!("{} {}", emoji, node.remark);
                    }
                }
            }
        }
        
        // Sort nodes if needed
        if extra.sort_flag {
            nodes.sort_by(|a, b| a.remark.cmp(&b.remark));
        }
    }
  note: "Implement node preprocessing with rename and emoji support"

# Missing function imports
missing_function_imports:
  pattern: "proxy_to_(ss|single|ssd)"
  replacement: |
    use crate::generator::config::formats::{
        ss::proxy_to_ss,
        single::proxy_to_single,
        ssd::proxy_to_ssd,
    };
  note: "Import missing proxy conversion functions"

# Builder pattern
builder_pattern:
  pattern: "SubconverterConfigBuilder"
  replacement: |
    impl SubconverterConfigBuilder {
        pub fn new() -> Self {
            SubconverterConfigBuilder {
                config: SubconverterConfig {
                    target: SubconverterTarget::Clash,
                    urls: Vec::new(),
                    insert_urls: Vec::new(),
                    prepend_insert: false,
                    group_name: None,
                    base_content: HashMap::new(),
                    ruleset_configs: Vec::new(),
                    proxy_groups: Vec::new(),
                    include_remarks: Vec::new(),
                    exclude_remarks: Vec::new(),
                    extra: ExtraSettings::default(),
                    device_id: None,
                    filename: None,
                    update_interval: 86400,
                    filter_script: None,
                    update_strict: false,
                    managed_config_prefix: String::new(),
                    upload_path: None,
                    upload: false,
                    proxy: None,
                    token: None,
                    authorized: false,
                    sub_info: None,
                    rule_bases: RuleBases::default(),
                },
            }
        }
    }
  note: "Implement builder pattern for configuration"

# Rule base structure
rule_base_structure:
  pattern: "RuleBases"
  replacement: |
    #[derive(Debug, Clone, Default)]
    pub struct RuleBases {
        pub clash_rule_base: String,
        pub surge_rule_base: String,
        pub surfboard_rule_base: String,
        pub mellow_rule_base: String,
        pub quan_rule_base: String,
        pub quanx_rule_base: String,
        pub loon_rule_base: String,
        pub sssub_rule_base: String,
        pub singbox_rule_base: String,
    }
  note: "Define rule base structure for different formats" 